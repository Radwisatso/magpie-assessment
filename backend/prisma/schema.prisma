// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum CategoryName {
  ROMANCE
  HORROR
  EDUCATION
  SCIENCE
  ACTION
}

enum LendingStatus {
  BORROWED
  RETURNED
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  name     String
  role     UserRole @default(MEMBER)
  members  Member[]
  books    Book[]
  lendings Lending[] @relation("LendingCreatedBy")

  @@map("users")
}

model Member {
  id         Int      @id @default(autoincrement())
  userId     Int      @map("user_id")
  name       String
  email      String   @unique
  phone      String?
  status     MemberStatus @default(ACTIVE)
  joinedDate DateTime @map("joined_date")
  user       User     @relation(fields: [userId], references: [id])
  lendings   Lending[]

  @@map("members")
}

model Book {
  id         Int       @id @default(autoincrement())
  title      String
  author     String
  isbn       String    @unique
  quantity   Int
  categoryId Int       @map("category_id")
  createdBy  Int       @map("created_by")
  category   Category  @relation(fields: [categoryId], references: [id])
  creator    User      @relation(fields: [createdBy], references: [id])
  lendings   Lending[]
  status     BookStatus?

  @@map("books")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  CategoryName
  books Book[]

  @@map("categories")
}

model Lending {
  id           Int       @id @default(autoincrement())
  bookId       Int       @map("book_id")
  memberId     Int       @map("member_id")
  borrowedDate DateTime  @map("borrowed_date")
  dueDate      DateTime  @map("due_date")
  returnDate   DateTime? @map("return_date")
  status       LendingStatus
  createdBy    Int       @map("created_by")
  book         Book      @relation(fields: [bookId], references: [id])
  member       Member    @relation(fields: [memberId], references: [id])
  creator      User      @relation("LendingCreatedBy", fields: [createdBy], references: [id])

  @@map("lending")
}

model BookStatus {
  id           Int   @id @default(autoincrement())
  bookId       Int   @map("book_id") @unique
  availableQty Int   @map("available_qty")
  borrowedQty  Int   @map("borrowed_qty")
  book         Book  @relation(fields: [bookId], references: [id])

  @@map("book_status")
}